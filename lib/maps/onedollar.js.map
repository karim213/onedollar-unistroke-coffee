{"version":3,"sources":["onedollar.coffee"],"names":[],"mappings":"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","file":"onedollar.js","sourceRoot":"/source/","sourcesContent":["# The library is Open Source Software released under the MIT License.\n# It's developed by Darius Morawiec. 2013-2016\n#\n# https://github.com/nok/onedollar-coffeescript\n#\n# ---\n#\n# The $1 Gesture Recognizer is a research project by Wobbrock, Wilson and Li of\n# the University of Washington and Microsoft Research. It describes a simple\n# algorithm for accurate and fast recognition of drawn gestures.\n#\n# Gestures can be recognised at any position, scale, and under any rotation.\n# The system requires little training, achieving a 97% recognition rate with\n# only one template for each gesture.\n#\n# http://depts.washington.edu/aimgroup/proj/dollar/\n\n\n\nclass OneDollar\n\n\n  # Math constants:\n  PHI = 0.5 * (-1.0 + Math.sqrt(5.0))\n\n  # Prepared inner variables:\n  SIZE = HALF = ANGLE = STEP = null\n\n  # Internal data handlers:\n  _options = {}\n  _templates = {}\n  _binds = {}\n  _hasBinds = false\n  _candidates = []\n\n\n  # The constructor of the algorithm.\n  #\n  # @param {[object]} options  The options of the algorithm.\n  #\n  # @return OneDollar\n  constructor: (options = {}) ->\n    _options = options\n\n    # Threshold in percent of callbacks:\n    if !('score' of _options)\n      _options['score'] = 80\n\n    if !('parts' of _options)\n      _options['parts'] = 64\n\n    if !('angle' of _options)\n      _options['angle'] = 45\n    ANGLE = ___radians _options.angle\n\n    if !('step' of _options)\n      _options['step'] = 2\n    STEP = ___radians _options.step\n\n    # Size of bounding box:\n    if !('size' of _options)\n      _options['size'] = 250.0\n    SIZE = _options.size\n    HALF = 0.5 * Math.sqrt(SIZE * SIZE + SIZE * SIZE)\n\n    return @\n\n\n  # Add a new template.\n  #\n  # @param {String} name  The name of the template.\n  # @param {Array} points  The points of the gesture.\n  #\n  # @return OneDollar\n  add: (name, points) ->\n    if points.length > 0\n      _templates[name] = _transform points\n    return @\n\n\n  # Remove a template.\n  #\n  # @param {String} name  The name of the template.\n  #\n  # @return OneDollar\n  remove: (name) ->\n    if _templates[name] isnt undefined\n      delete _templates[name]\n    return @\n\n\n  # Bind callback for chosen templates.\n  #\n  # @param {String} name  The name of the template.\n  # @param {function} fn  The callback function.\n  #\n  # @return OneDollar\n  on: (name, fn) ->\n    names = []\n    if name == \"*\"\n      for name, template of _templates\n        names.push name\n    else\n      names = name.split ' '\n\n    for name in names\n      if _templates[name] isnt undefined\n        _binds[name] = fn\n        _hasBinds = true\n      else\n        throw new Error \"The template '\" + name + \"' isn't defined.\"\n    return @\n\n\n  # Unbind callback for chosen templates.\n  #\n  # @param {String} name  The name of the template.\n  #\n  # @return OneDollar\n  off: (name) ->\n    if _binds[name] isnt undefined\n      delete _binds[name]\n      _hasBinds = false\n      for name, bind of _binds\n        if _templates.hasOwnProperty name\n          _hasBinds = true\n          break\n    return @\n\n\n  # Get information about the algorithm.\n  #\n  # @return Object  Return options, templates and binds.\n  toObject: ->\n    return {\n      options: _options\n      templates: _templates\n      binds: _binds\n    }\n\n\n  # Create a new gesture candidate.\n  #\n  # @param {Integer} id   The unique ID of the candidate.\n  # @param {Array} point  The start position of the candidate.\n  #\n  # @return OneDollar\n  start: (id, point) ->\n    if typeof(id) is 'object' and typeof(point) is 'undefined'\n      point = id\n      id = -1\n    _candidates[id] = []\n    @update id, point\n    return @\n\n\n  # Add a new position to a created candidate.\n  #\n  # @param {Integer} id   The unique ID of the candidate.\n  # @param {Array} point  The new position of the candidate.\n  #\n  # @return OneDollar\n  update: (id, point) ->\n    if typeof(id) is 'object' and typeof(point) is 'undefined'\n      point = id\n      id = -1\n    _candidates[id].push point\n    return @\n\n\n  # Close a new gesture candidate and trigger the gesture recognition.\n  #\n  # @param {Integer} id   The unique ID of the candidate.\n  # @param {Array} point  The last position of the candidate.\n  #\n  # @return OneDollar\n  end: (id, point) ->\n    if typeof(id) is 'object' and typeof(point) is 'undefined'\n      point = id\n      id = -1\n    @update id, point\n    result = @check _candidates[id]\n    delete _candidates[id]\n    return result\n\n\n  # Run the gesture recognition.\n  #\n  # @param {Array} candidate The candidate gesture.\n  #\n  # @return {boolean|Object} The result object.\n  check: (candidate) ->\n    args = false\n    points = candidate.length\n    if points < 3\n      return args\n\n    path =\n      start: [candidate[0][0], candidate[0][1]]\n      end: [candidate[points - 1][0], candidate[points - 1][1]]\n      centroid: if points > 1 then ___centroid candidate else path.start\n    candidate = _transform candidate\n\n    ranking = []\n    bestDist = +Infinity\n    bestName = null\n    for name, template of _templates\n      if _hasBinds == false or _binds[name] isnt undefined\n        distance = _findBestMatch candidate, template\n        score = parseFloat(((1.0 - distance / HALF) * 100).toFixed(2))\n        if isNaN score\n          score = 0.0\n        ranking.push\n          name: name\n          score: score\n        if distance < bestDist\n          bestDist = distance\n          bestName = name\n\n    if ranking.length > 0\n      # Sorting:\n      if ranking.length > 1\n        ranking.sort (a, b) ->\n          return if a.score < b.score then 1 else -1\n\n      idx = candidate.length - 1\n      args =\n        name: ranking[0].name\n        score: ranking[0].score\n        recognized: false\n        path: path\n        ranking: ranking\n\n      if ranking[0].score >= _options.score\n        args.recognized = true\n        if _hasBinds\n          _binds[ranking[0].name].apply @, [args]\n\n    return args\n\n\n  # Transform the data  to a comparable format.\n  #\n  # @param {Array} points The raw candidate gesture.\n  #\n  # @return Array The transformed candidate.\n  _transform = (points) ->                 # Algorithm step:\n    points = __resample points             # (1)\n    points = __rotateToZero points       # (2)\n    points = __scaleToSquare points      # (3)\n    points = __translateToOrigin points  # (4)\n    return points\n\n\n  # Find the best match between a candidate and template.\n  #\n  # @param {Array} candidate The candidate gesture.\n  # @param {Array} template  The template gesture.\n  #\n  # @return Float The computed smallest distance.\n  _findBestMatch = (candidate, template) ->\n    rt = ANGLE\n    lt = -ANGLE\n\n    centroid = ___centroid candidate\n    x1 = PHI * lt + (1.0 - PHI) * rt\n    f1 = __distanceAtAngle candidate, template, x1, centroid\n    x2 = (1.0 - PHI) * lt + PHI * rt\n    f2 = __distanceAtAngle candidate, template, x2, centroid\n\n    while (Math.abs(rt - lt) > STEP)\n      if f1 < f2\n        rt = x2\n        x2 = x1\n        f2 = f1\n        x1 = PHI * lt + (1.0 - PHI) * rt\n        f1 = __distanceAtAngle candidate, template, x1, centroid\n      else\n        lt = x1\n        x1 = x2\n        f1 = f2\n        x2 = (1.0 - PHI) * lt + PHI * rt\n        f2 = __distanceAtAngle candidate, template, x2, centroid\n    return Math.min(f1, f2)\n\n\n  # 1: Resampling of a gesture.\n  #\n  # @param {Array} points The points of a move.\n  #\n  # @return Array The resampled gesture.\n  __resample = (points) ->\n    seperator = (___length points) / (_options.parts - 1)\n    distance = 0.0\n    resampled = []\n    resampled.push [points[0][0], points[0][1]]\n    idx = 1\n    while idx < points.length\n      prev = points[idx - 1]\n      point = points[idx]\n      space = ___distance(prev, point)\n      if (distance + space) >= seperator\n        x = prev[0] + ((seperator - distance) / space) * (point[0] - prev[0])\n        y = prev[1] + ((seperator - distance) / space) * (point[1] - prev[1])\n        resampled.push [x, y]\n        points.splice idx, 0, [x, y]\n        distance = 0.0\n      else\n        distance += space\n      idx += 1\n\n    while resampled.length < _options.parts\n      resampled.push [points[points.length-1][0], points[points.length-1][1]]\n\n    return resampled\n\n\n  # 2: Rotation of the gesture.\n  #\n  # @param {Array} points The points of a move.\n  #\n  # @return Array The rotated gesture.\n  __rotateToZero = (points) ->\n    centroid = ___centroid points\n    theta = Math.atan2(centroid[1] - points[0][1], centroid[0] - points[0][0])\n    return ___rotate points, -theta, centroid\n\n\n  # 3: Scaling of a gesture.\n  #\n  # @param {Array} points The points of a move.\n  #\n  # @return Array The scaled gesture.\n  __scaleToSquare = (points) ->\n    minX = minY = +Infinity\n    maxX = maxY = -Infinity\n    for point in points\n      minX = Math.min(point[0], minX)\n      maxX = Math.max(point[0], maxX)\n      minY = Math.min(point[1], minY)\n      maxY = Math.max(point[1], maxY)\n    deltaX = maxX - minX\n    deltaY = maxY - minY\n\n    offset = [SIZE / deltaX, SIZE / deltaY]\n    return ___scale points, offset\n\n\n  # 4: Translation of a gesture.\n  #\n  # @param {Array} points The points of a move.\n  #\n  # @return Array The translated gesture.\n  __translateToOrigin = (points) ->\n    centroid = ___centroid points\n    centroid[0] *= -1\n    centroid[1] *= -1\n    return ___translate points, centroid\n\n\n  # Compute the delta space between two sets of points at a specific angle.\n  #\n  # @param {Array} points1 The points of a move.\n  # @param {Array} points2 The points of a move.\n  # @param {Float} radians The radian value.\n  #\n  # @return Float The computed distance.\n  __distanceAtAngle = (points1, points2, radians, centroid) ->\n    _points1 = ___rotate points1, radians, centroid\n    result = ___delta _points1, points2\n    return result\n\n\n  # Compute the delta space between two sets of points.\n  #\n  # @param {Array} points1 The points of a move.\n  # @param {Array} points2 The points of a move.\n  #\n  # @return Float The computed distance.\n  ___delta = (points1, points2) ->\n    delta = 0.0\n    for point, idx in points1\n      delta += ___distance(points1[idx], points2[idx])\n    return delta / points1.length\n\n\n  # Compute the distance of a gesture.\n  #\n  # @param {Array} points The points of a move.\n  #\n  # @return Float The computed distance.\n  ___length = (points) ->\n    length = 0.0\n    prev = null\n    for point in points\n      if prev isnt null\n        length += ___distance(prev, point)\n      prev = point\n    return length\n\n\n  # Compute the euclidean distance between two points.\n  #\n  # @param {Array} p1 The first two dimensional point.\n  # @param {Array} p2 The second two dimensional point.\n  #\n  # @return Float The computed euclidean distance.\n  ___distance = (p1, p2) ->\n    x = Math.pow(p1[0] - p2[0], 2)\n    y = Math.pow(p1[1] - p2[1], 2)\n    return Math.sqrt(x + y)\n\n\n  # Compute the centroid of a set of points.\n  #\n  # @param {Array} points1 The points of a move.\n  #\n  # @return Array The centroid object.\n  ___centroid = (points) ->\n    x = 0.0\n    y = 0.0\n    for point in points\n      x += point[0]\n      y += point[1]\n    x /= points.length\n    y /= points.length\n    return [x, y]\n\n\n  # Rotate a gesture.\n  #\n  # @param {Array} points  The points of a move.\n  # @param {Float} radians The rotation angle.\n  # @param {Array} pivot   The pivot of the rotation.\n  #\n  # @return Array The rotated gesture.\n  ___rotate = (points, radians, pivot) ->\n    sin = Math.sin(radians)\n    cos = Math.cos(radians)\n    neew = []\n    for point, idx in points\n      deltaX = points[idx][0] - pivot[0]\n      deltaY = points[idx][1] - pivot[1]\n      points[idx][0] = deltaX * cos - deltaY * sin + pivot[0]\n      points[idx][1] = deltaX * sin + deltaY * cos + pivot[1]\n    return points\n\n\n  # Scale a gesture.\n  #\n  # @param {Array} points The points of a move.\n  # @param {Array} offset The scalar values.\n  #\n  # @return Array The scaled gesture.\n  ___scale = (points, offset) ->\n    for point, idx in points\n      points[idx][0] *= offset[0]\n      points[idx][1] *= offset[1]\n    return points\n\n\n  # Translate a gesture.\n  #\n  # @param {Array} points The points of a move.\n  # @param {Array} offset The translation values.\n  #\n  # @return Array The translated gesture.\n  ___translate = (points, offset) ->\n    for point, idx in points\n      points[idx][0] += offset[0]\n      points[idx][1] += offset[1]\n    return points\n\n\n  # Compute the radians from degrees.\n  #\n  # @param {Float} degrees The degree value.\n  #\n  # @return Float The computed radian value.\n  ___radians = (degrees) ->\n    return degrees * Math.PI / 180.0\n\n\n# Environment and testing:\nif typeof exports isnt 'undefined'\n  exports.OneDollar = OneDollar\n"]}